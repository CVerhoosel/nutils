#! /usr/bin/env python

from nutils import *


#@parallel.fork
@log.title
def makeplots( domain, geom, greysmooth, index, indicator, supp ):

  frame = topology.Topology( domain.ndims, [ elem for elem in domain if elem[:-1] in supp ] ).elem_eval( geom, ischeme='bezier3', separate=True )
  points, fval, xgrad, indic = domain.elem_eval( [ geom, greysmooth, greysmooth.grad(geom)[0], indicator ], ischeme='bezier9', separate=True )

  with plot.PyPlot( 'fval', index=index ) as plt:
    plt.mesh( points, fval, triangulate='bezier' )
    plt.clim( -1, 1 )
    plt.colorbar()
    plt.mesh( frame, triangulate='bezier', edgecolors='white', setxylim=False )

  with plot.PyPlot( 'xgrad', index=index ) as plt:
    plt.mesh( points, xgrad, triangulate='bezier' )
    plt.clim( 0, 18 )
    plt.colorbar()
    plt.mesh( frame, triangulate='bezier', edgecolors='white', setxylim=False )

  with plot.PyPlot( 'indicator', index=index ) as plt:
    plt.mesh( points, indic, triangulate='bezier' )
    plt.colorbar()
    plt.mesh( frame, triangulate='bezier', edgecolors='white', setxylim=False )


def main( degree=1, niter=30, triangular=False ):

  
  domain, geom = mesh.demo() if triangular else mesh.rectilinear( [ (0,.5,1) ] * 2 )
  greydata = function.tanh( ( function.norm2(geom) - .5 ) * 20 )

  __logger__ = log.count( 'iter' )
  for iiter in __logger__:

    funcsp = domain.stdfunc( degree=degree )
    greysmooth = domain.projection( greydata, geometry=geom, onto=funcsp, ischeme='gauss5', droptol=0, verify=int(funcsp.shape[0]) )
    indicator = ( greysmooth - greydata )**2
    if iiter >= niter:
      break

    weighted_residual = domain.integrate( funcsp * indicator, geometry=geom, ischeme='gauss3' )
    refine = weighted_residual.argsort()[-1:]
    supp = function.supp( funcsp, indices=refine )

    makeplots( domain, geom, greysmooth, iiter, indicator, supp )

    domain = domain.refined_by( supp )


util.run( main )
