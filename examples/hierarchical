#!/usr/bin/env python

from nutils import *

def makeplot ( name, topo, geom, funcsp  ):
  
  levels = dof_levels( funcsp )

  print type(levels)
  print levels

  points, vals = topo.elem_eval( [geom[0],funcsp], ischeme='bezier10', separate=True )
  ticks = numeric.unique( topo.elem_eval( geom[0], ischeme='bezier2', separate=False ) )
  with plot.PyPlot(name) as plt:
    plt.plot( points, vals )
    plt.xticks( ticks )
    plt.grid()

def l2cond ( topo, geom, funcsp ):
  mat = topo.integrate( funcsp[:,_]*funcsp[_,:], geometry=geom, ischeme='gauss4' )
  return mat.cond()

def selectelems( subdom, topo, geom ):
  ticks = plot._nansplit(topo.elem_eval( geom[0], ischeme='bezier2', separate=True ))
  select = (numeric.greater( ticks, subdom[0]-1e-12 ) & numeric.less( ticks, subdom[1]+1e-12 )).all(axis=1)
  return [elem[:-1] for elem in topo.elements[select]]

def dof_levels( funcsp ):
  (func,(dofaxis,)), = function.blocks( funcsp )
  levels = -numeric.ones( funcsp.shape[0], dtype=int )
  for elem, idofs in dofaxis.dofmap.items():
    stds = func.stdmap[elem]
    print stds
    print elem
    assert len(elem) - 1 == len(stds)
    for i, std in enumerate( stds ):
      level = len(stds) - i - 1
      ndofs = std[1].sum() if isinstance( std, tuple ) \
         else std.nshapes if std is not None \
         else 0
      I = idofs[:ndofs]
      idofs = idofs[ndofs:]
      new = numeric.equal( levels[I], -1 )
      levels[ I[new] ] = level
      assert numeric.equal( levels[ I[~new] ], level ).all()
    assert not len(idofs)
  assert not numeric.equal( levels, -1 ).any()
  return levels

def main ( nelems = 8,
           degree = 2,
           trim   = 2 ):

  #Create domain
  topo, geom = mesh.rectilinear( [numeric.arange(nelems+1)] )

  if trim:
    lvl = geom[0]-trim
    topo, negtopo = topo.trim( lvl, maxrefine=2 )

  #Create basis
  funcsp = topo.splinefunc( degree=degree )
  
  #Plot the orignal basis
  makeplot( 'original', topo, geom, funcsp )

  refined_elems = selectelems( [2,5], topo, geom )

  topo = topo.refined_by( refined_elems )

  print topo
  print topo.basetopo
  print topo.basetopo.basetopo

  funcsp = topo.splinefunc( degree=degree )

  makeplot( 'refined_1', topo, geom, funcsp )

  refined_elems = selectelems( [3,6], topo, geom )

  topo = topo.refined_by( refined_elems )

  funcsp = topo.splinefunc( degree=degree )

  makeplot( 'refined_2', topo, geom, funcsp )


def alternative ( nelems = 8,
                  degree = 2,
                  trim   = 2  ):

  #Create domain
  topo, geom = mesh.rectilinear( [numeric.arange(nelems+1)] )

  if trim:
    lvl = geom[0]-trim
    trimmedtopo, negtopo = topo.trim( lvl, maxrefine=2 )

  #Create basis
  funcsp = trimmedtopo.splinefunc( degree=degree )
  
  #Plot the orignal basis
  makeplot( 'original', trimmedtopo, geom, funcsp )

  log.info( 'Condition number: %8.6e' % l2cond( trimmedtopo, geom, funcsp ) )

  refined_elems = selectelems( [2,5], topo, geom )

  topo = topo.refined_by( refined_elems )

  trimmedtopo, negtopo = topo.trim( lvl, maxrefine=2 )

  funcsp = trimmedtopo.splinefunc( degree=degree )

  makeplot( 'refined_1', trimmedtopo, geom, funcsp )

  log.info( 'Condition number: %8.6e' % l2cond( trimmedtopo, geom, funcsp ) )

  refined_elems = selectelems( [3,6], topo, geom )

  topo = topo.refined_by( refined_elems )

  trimmedtopo, negtopo = topo.trim( lvl, maxrefine=2 )

  funcsp = trimmedtopo.splinefunc( degree=degree )

  makeplot( 'refined_2', trimmedtopo, geom, funcsp )

  log.info( 'Condition number: %8.6e' % l2cond( trimmedtopo, geom, funcsp ) )

def gokturk ( nelems = 5,
              degree = 2,
              trim   = 4  ):

  #Create domain
  topo, geom = mesh.rectilinear( [numeric.arange(nelems+1)] )

  lvl = geom[0]-trim
  trimmedtopo, negtopo = topo.trim( lvl, maxrefine=2 )

  #Create basis
  funcsp = trimmedtopo.splinefunc( degree=degree )
  
  #Plot the orignal basis
  makeplot( 'original', trimmedtopo, geom, funcsp )

  log.info( 'Condition number: %8.6e' % l2cond( trimmedtopo, geom, funcsp ) )

  refined_elems = selectelems( [3,5], topo, geom )

  topo = topo.refined_by( refined_elems )

  trimmedtopo, negtopo = topo.trim( lvl, maxrefine=2 )

  funcsp = trimmedtopo.splinefunc( degree=degree )

  makeplot( 'refined_1', trimmedtopo, geom, funcsp )

  log.info( 'Condition number: %8.6e' % l2cond( trimmedtopo, geom, funcsp ) )


util.run( main, alternative, gokturk )


