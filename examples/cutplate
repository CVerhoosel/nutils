#! /usr/bin/env python

from nutils import *


@log.title
def makeplots( domain, geom, sigma, index ):

  sigma_dev = sigma - (function.trace(sigma)/domain.ndims) * function.eye(domain.ndims)
  vonmises = function.sqrt( ( sigma_dev**2 ).sum([0,1]) * 3./2 ) # TODO check fix for 2D

  points, colors = domain.simplex.elem_eval( [ geom, vonmises ], ischeme='bezier5', separate=True )
  with plot.PyPlot( 'solution', index=index ) as plt:
    plt.mesh( points, colors, triangulate='bezier' )
    plt.colorbar()
    plt.xlim( 0, 1.3 )
    plt.ylim( 0, 1.3 )


def main( nelems=None, maxrefine=2, radius=.5, degree=1, stress=library.Hooke(lmbda=1,mu=1), plots=True, solvetol=1e-5 ):

  if nelems:
    verts = numpy.linspace( 0, 1, nelems+1 )
    wholedomain, geom = mesh.rectilinear( [verts,verts] )
  else:
    wholedomain, geom = mesh.demo()
    if degree != 1:
      log.warning( 'setting degree=1 for triangular mesh' )
      degree = 1

  # plane strain case (see e.g. http://en.wikiversity.org/wiki/Introduction_to_Elasticity/Plate_with_hole_in_tension)
  x, y = geom / radius
  r2 = x**2 + y**2
  uexact = .2 * geom * ( [1-stress.nu,-stress.nu] + [2-2*stress.nu,2*stress.nu-1]/r2 + (.5-.5/r2)*[x**2-3*y**2,3*x**2-y**2]/r2**2 )

  levelset = function.norm2( geom ) - radius
  domain = wholedomain.trim( levelset, maxrefine=maxrefine )
  complement = wholedomain - domain
  dbasis = domain.basis( 'spline', degree=degree ).vector( 2 )

  cons = domain.boundary['left'].project( 0, geometry=geom, ischeme='gauss6', onto=dbasis[:,0] )
  cons |= domain.boundary['bottom'].project( 0, geometry=geom, ischeme='gauss6', onto=dbasis[:,1] )
  cons |= domain.boundary['top,right'].project( uexact, geometry=geom, ischeme='gauss6', onto=dbasis )

  elasticity = function.outer( dbasis.grad(geom), stress(dbasis.symgrad(geom)) ).sum([2,3])
  matrix = domain.integrate( elasticity, geometry=geom, ischeme='gauss6' )
  lhs = matrix.solve( constrain=cons, tol=solvetol, symmetric=True, precon='diag' )
  disp = dbasis.dot( lhs )

  if plots:
    makeplots( domain, geom+disp, stress(disp.symgrad(geom)), index=nelems )

  error = disp - uexact
  err = numpy.sqrt( domain.integrate( [ (error**2).sum(-1), ( error.grad(geom)**2 ).sum([-2,-1]) ], geometry=geom, ischeme='gauss7' ) )
  log.user( 'errors: l2={}, h1={}'.format(*err) )

  return err, cons, lhs


def conv( degree=1, nrefine=4 ):

  l2err = []
  h1err = []

  for irefine in log.range( 'refine', nrefine ):
    err, cons, lhs = main( nelems=2**(1+irefine), degree=degree )
    l2err.append( err[0] )
    h1err.append( err[1] )

  h = .5**numpy.arange(nrefine)

  with plot.PyPlot( 'convergence' ) as plt:
    plt.subplot( 211 )
    plt.loglog( h, l2err, 'k*--' )
    plt.slope_triangle( h, l2err )
    plt.ylabel( 'L2 error' )
    plt.grid( True )
    plt.subplot( 212 )
    plt.loglog( h, h1err, 'k*--' )
    plt.slope_triangle( h, h1err )
    plt.ylabel( 'H1 error' )
    plt.grid( True )


def unittest():

  retvals = main( nelems=None, degree=2, maxrefine=2, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNplUEGOxDAI+04rhRUQIOE5c5jr/P+4IZRqtisVGSLsYlM7pJGe7Th4mr3BmqLwG7Stt8/r02jYGtcS
    dQmMNyObsRI9/sR3dQHPYhkURObBJUDuVn0UKJGGIpiIljRM7n4Pbig1fNffvy8A713DyaaxERZtWSLx
    tPOw5bNv12VNcVhg2hvd+JrIdBOZcGxESmRNm5fg0zbNOEpu69StB4IQbu3/GYAuz7upIGB4hnCnAVPi
    jmC5zGQxVxMn7auBMdeiN8l8vrMCJkudCgy6JeVs5y/k+YF3''' )

  retvals = main( nelems=4, degree=2, maxrefine=2, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNqdUsuOwzAI/J1WCivAvPw5e+i1/39cAk53u0oulRKBGfOaMW032Ujv2+2mJOMBvhGO+QDdMvb8fm74
    9fvt5/8/46T9+hlmonqFUfZ5gJxjqoWxjFhWy7JSWaQ6U3Dh5GZntWAO96sBEtRa9GQxCJx8hZmqX2Eq
    duQBTc76lg5iBYElsBxhL9JAqWsl2USRS4w3wsGH1IZJRG04hSqRnSuP0ym7VGBuVplNihmJOod57Wq+
    7FKGOea6j80odt6IYppqPnmpxUNw2ZqHiXgp0YoYVfxTBbNfkQAa2FRN1MPh5uwQFYin1+VjKnBqOiDM
    VhaxrKyX2iBHzZwqWofJHXHdF9O3F6Ajsk9kQ8HuPLRlBvXW4++jACZv4aftKqXDtson7e18/lDuP2VC
    4hw=''' )

  retvals = main( nelems=4, degree=2, maxrefine=3, plots=False, solvetol=0 )
  assert debug.checkdata( retvals, '''
    eNqdUjluAzEM/I4NLAMOxUN6Tgq3/n8ZiZSdOPA2BnZBSsNzRjguesCux+Vi3OxGcYAlbmTHvLt/3w/+
    +v3W+f8vPLDC32GuZmcYwO1G+h4zS0y09W0trRjSMvKMLokj3N/VotEizgaYoI0FvlmMOg85w9wszjBT
    f+QRhsz6Ph3mvCTRzumoRJJGBnuQDazl2gvhFB68NlOtTYeyrniJVnY6abcKIsWqSDEC7clU954jePSM
    eygjMnjHoxjlYrb1Oud8+lRLmmLbrC+AbCUqz1F9P1QQGL5IIItN1WCV7Uhx9hCV0NAzWJpnNQqUpNS9
    9qMB0Z31VJuUvSpoi+piQyo+bC1mLy+gcUy3z4bKldfMt36Bmu7PoyDBip/CD0ekM9mtuSbtu+HHD+X6
    Azyw4hE=''' )


util.run( main, conv, unittest )
